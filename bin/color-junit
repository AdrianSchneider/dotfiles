#!/usr/bin/env python

# Copyright (c) 2011 Eric Evans <eevans@sym-link.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import re, sys

STATUS_RE = re.compile(
    '(?:\s+\[junit\] )?Tests run: [\d]+, Failures: ([\d]+), Errors: ([\d]+)')
EXCEPT_RE = re.compile(
    '(?:\s+\[junit\] )?(Exception in |\tat \w+|Caused by: )')

RED = "\033[1;31m%s\033[0m"
GREEN = "\033[1;32m%s\033[0m"
YELLOW = "\033[1;33m%s\033[0m"

def colorize(line):
    match = STATUS_RE.match(line)
    if match:
        (failures, errors) = match.groups()
        if (int(failures)) > 0 or (int(errors) > 0):
            sys.stdout.write(RED % line)
        else:
            sys.stdout.write(GREEN % line)
        return True
    
    match = EXCEPT_RE.match(line)
    if match:
        sys.stdout.write(YELLOW % line)
        return True
        
    return False

if __name__ == '__main__':
    line = sys.stdin.readline()
    while(line):
        if not colorize(line):
            sys.stdout.write(line)
        line = sys.stdin.readline()
        sys.stdout.flush()
